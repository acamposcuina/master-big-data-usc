rm(list = ls())
knitr::opts_chunk$set(echo=TRUE)
setwd("c:/Users/Andres/Google Drive/USC/MaBD/Mineria de Datos/Practicas/Practica5/")
library(ggplot2)
library(gridExtra)
library(reshape)
library(arules)
library(arulesViz)
library(car)
library(ggplot2)
library(gridExtra)
library(reshape)
library(arules)
library(arulesViz)
library(car)
titanic.basket <-
read.transactions(
"./data/titanic1",
format = "basket",
rm.duplicates = TRUE,
quote = "\""
)
# Msotramos por pantalla
titanic.basket
View(titanic.basket)
View(titanic.basket)
titanic.basket@itemInfo
titanic.basket <-
read.transactions(
"./data/titanic1",
format = "basket",
header=FALSE,
rm.duplicates = TRUE,
quote = "\""
)
# Msotramos por pantalla
titanic.basket
titanic.single <-
read.transactions(
"./data/titanic2",
format = "single",
header=FALSE,
cols = c(1, 2),
rm.duplicates = TRUE,
quote = "\""
)
# Mostramos por pantalla
titanic.single
titanic <- read.csv(
'./data/titanic.csv',
header=TRUE,
sep = ';'
)
# Mostramos los atributos que tiene por pantalla
str(titanic)
titanic <- read.csv2(
'./data/titanic.csv',
header=TRUE,
sep = ';'
)
# Mostramos los atributos que tiene por pantalla
str(titanic)
titanic <- read.csv(
'./data/titanic.csv',
header=TRUE,
sep = ';'
)
# Mostramos los atributos que tiene por pantalla
str(titanic)
titanic$tarifa <- NULL
titanic$edad <-
discretize(
titanic$edad,
method = "fixed",
breaks = c(0, 18, 66, 123),
labels = c("Child", "Adult", "Old"),
ordered = TRUE
)
titanic$edad <- as.int(titanic$edad)
titanic$edad <- as.integer(titanic$edad)
titanic <- read.csv(
'./data/titanic.csv',
header=TRUE,
sep = ';'
)
# Mostramos los atributos que tiene por pantalla
str(titanic)
titanic$edad <- as.numeric(titanic$edad)
titanic <- read.csv(
'./data/titanic.csv',
header=TRUE,
sep = ';'
)
# Mostramos los atributos que tiene por pantalla
str(titanic)
titanic <- read.csv(
'./data/titanic.csv',
header=TRUE,
sep = ';'
)
# Mostramos los atributos que tiene por pantalla
str(titanic)
# Cambiamos las comas por puntos para que la
titanic$edad <- as.numeric(sub(",", ".", titanic$edad, fixed = TRUE))
# Cambiamos las comas por puntos para que la conversión se haga correctamente
# edad a numeric
titanic$edad <- as.numeric(sub(",", ".", titanic$edad, fixed = TRUE))
# tarifa a numeric
titanic$tarifa <- as.numeric(sub(",", ".", titanic$tarifa, fixed = TRUE))
titanic$tarifa <- NULL
# Cambiamos las comas por puntos para que la conversión se haga correctamente
# edad a numeric
titanic$edad <- as.numeric(sub(",", ".", titanic$edad, fixed = TRUE))
titanic$tarifa <- NULL
titanic$edad <-
discretize(
titanic$edad,
method = "fixed",
breaks = c(0, 18, 66, 123),
labels = c("Child", "Adult", "Old"),
ordered = TRUE
)
titanic$superviviente <-
as.factor(recode(titanic$superviviente, "0='No';1='Si'"))
titanic.trans <- as(titanic, "transactions")
# Mostramos por pantalla
titanic.trans
titanic$clase <- as.factor(titanic$clase)
titanic$sexo <- as.factor(titanic$sexo)
titanic$embarque <- as.factor(titanic$embarque)
titanic.trans <- as(titanic, "transactions")
# Mostramos por pantalla
titanic.trans
write(titanic.trans, file = "./output/titanic.basket", format = "basket")
write(titanic.trans, file = "./output/titanic.basket", format = "basket")
write(titanic.trans, file = "./output/titanic.single", format = "single")
titanic.rules <- apriori(titanic.trans)
titanic.eclat <- eclat(titanic.trans)
titanic.rules
attributes(titanic.rules)
View(titanic.rules)
View(titanic.rules)
ejercicio4.df <- data.frame(matrix(ncol = 3))
colnames(ejercicio4.df) <- c("parámetro", "reglas_generadas_support", "reglas_generadas_confidence")
# Definimos un contador de la iteración
i <- 0
# Iteramos sobe los distintos valores del parámetro support
for (iter.value in seq(0.1, 1, 0.1)) {
support <- apriori(
titanic.trans,
parameter = list(support = iter.value),
control = list(verbose=FALSE)
)
confidence <- apriori(
titanic.trans,
parameter = list(confidence = iter.value),
control = list(verbose=FALSE)
)
ejercicio4.df[i, ] <- c(iter.value, length(support), length(confidence))
# Aumentamos el contador de la iteración
i <- i + 1
}
# Mostramos el resultado por pantalla
ejercicio4.df
ejercicio4.df <- data.frame(matrix(ncol = 3))
colnames(ejercicio4.df) <- c("parámetro", "reglas_generadas_support", "reglas_generadas_confidence")
# Definimos un contador de la iteración
i <- 0
# Iteramos sobe los distintos valores del parámetro support
for (iter.value in seq(0, 1, 0.1)) {
support <- apriori(
titanic.trans,
parameter = list(support = iter.value),
control = list(verbose=FALSE)
)
confidence <- apriori(
titanic.trans,
parameter = list(confidence = iter.value),
control = list(verbose=FALSE)
)
ejercicio4.df[i, ] <- c(iter.value, length(support), length(confidence))
# Aumentamos el contador de la iteración
i <- i + 1
}
# Mostramos el resultado por pantalla
ejercicio4.df
ggplot(melt(df, id.vars = "parámetro")) +
geom_point(aes(x=param_value, y=value, color=variable)) +
scale_color_discrete(name = "Parameter")
ggplot(melt(ejercicio4.df, id.vars = "parámetro")) +
geom_point(aes(x = param_value, y = value, color = variable)) +
scale_color_discrete(name = "Parameter")
ggplot(melt(ejercicio4.df, id.vars = "parámetro")) +
geom_point(aes(x = 'parámetro', y = value, color = variable)) +
scale_color_discrete(name = "Parameter")
ejercicio4.df <- data.frame(matrix(ncol = 3))
colnames(ejercicio4.df) <- c("parametro", "reglas_generadas_support", "reglas_generadas_confidence")
# Definimos un contador de la iteración
i <- 0
# Iteramos sobe los distintos valores del parámetro support
for (iter.value in seq(0, 1, 0.1)) {
support <- apriori(
titanic.trans,
parameter = list(support = iter.value),
control = list(verbose=FALSE)
)
confidence <- apriori(
titanic.trans,
parameter = list(confidence = iter.value),
control = list(verbose=FALSE)
)
ejercicio4.df[i, ] <- c(iter.value, length(support), length(confidence))
# Aumentamos el contador de la iteración
i <- i + 1
}
# Mostramos el resultado por pantalla
ejercicio4.df
g <- ggplot(melt(ejercicio4.df, id.vars = "parámetro")) +
geom_point(aes(x = parametro, y = value, color = variable)) +
scale_color_discrete(name = "Parameter")
g <- ggplot(melt(ejercicio4.df, id.vars = "parametro")) +
geom_point(aes(x = parametro, y = value, color = variable)) +
scale_color_discrete(name = "Parameter")
# Mostramos
g
g <- ggplot(melt(ejercicio4.df, id.vars = "parametro")) +
geom_point(aes(x = parametro, y = value, color = variable)) +
geom_line() +
scale_color_discrete(name = "Parameter")
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
scale_color_discrete(name = "Parameter")
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line()
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
scale_x_continuous(
name = "Valor del parámetro",
limits = seq(0, 1, 0.1)
)
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
scale_x_continuous(
name = "Valor del parámetro",
limits = c(seq(0, 1, 0.1))
)
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
scale_x_discrete(
name = "Valor del parámetro",
limits = c(seq(0, 1, 0.1))
)
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
scale_x_discrete(
name = "Valor del parámetro",
limits = seq(0, 1, 0.1)
)
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
scale_x_discrete(
name = "Valor del parámetro",
limits = seq(0.1, 1, 0.1)
)
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
xlim(0.1, 1)
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
xlim(0.1, 1) +
scale_x_discrete(breaks = seq(0.1, 1, 0.1))
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
scale_x_discrete(breaks = seq(0.1, 1, 0.1))
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
xlim(0.1, 1)
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
xlim(0.1, 1) +
labs(
title = "Reglas Generadas",
x = "Valor del parámetro",
y = "Reglas generadas"
)
# Mostramos
g
g <- ggplot(
melt(ejercicio4.df, id.vars = "parametro"),
aes(x = parametro, y = value, color = variable)
) +
geom_point() +
geom_line() +
xlim(0.1, 1) +
labs(
title = "Reglas Generadas",
x = "Valor del parámetro",
y = "Reglas generadas"
)
# Mostramos
g
titanic.rules.sexo <- apriori(
titanic.trans,
appearance = list(
rhs = c("sexo=hombre", "sexo=mujer"),
default = "lhs"
),
control = list(verbose = FALSE)
)
# Mostramos las reglas encontradas por pantalla
inspect(titanic.rules.sexo)
library(ggplot2)
library(gridExtra)
library(reshape)
library(arules)
library(arulesViz)
library(car)
titanic.rules.sub1 <- subset(
titanic.rules,
subset = lhs %pin% "embarque" & rhs %pin% "superviviente")
# Mostramos las reglas encontradas por pantalla
inspectDT(titanic.rules.sub1)
titanic.rules.sub1 <- subset(
titanic.rules,
subset = lhs %pin% "embarque" & rhs %pin% "superviviente")
# Mostramos las reglas encontradas por pantalla
inspectDT(titanic.rules.sub1)
titanic.rules.sub1 <- subset(
titanic.rules,
subset = lhs %pin% "embarque" & rhs %pin% "superviviente")
# Mostramos las reglas encontradas por pantalla
inspectDT(titanic.rules.sub1)
titanic.rules.sub2 <- subset(
titanic.rules.sub1,
subset = confidence > 0.83
)
# Mostramos por pantalla
inspectDT(titanic.rules.sub2)
quality(titanic.rules) <- cbind(
quality(titanic.rules),
interestMeasure(
titanic.rules,
c("gini", "hyperLift", "hyperConfidence"),
titanic.trans
)
)
inspectDT(head(sort(titanic.rules, by = "gini")), 5)
inspectDT(head(sort(titanic.rules, by = "hyperLift")), 5)
inspectDT(head(sort(titanic.rules, by = "hyperConfidence")), 5)
inspectDT(head(sort(titanic.rules, by = "gini")), 5)
inspectDT(head(sort(titanic.rules, by = "hyperLift")), 5)
inspectDT(head(sort(titanic.rules, by = "hyperConfidence")), 5)
inspectDT(head(sort(titanic.rules, by = "gini")))
inspectDT(head(sort(titanic.rules, by = "hyperLift")), 5)
inspectDT(head(sort(titanic.rules, by = "hyperConfidence")), 5)
inspectDT(head(sort(titanic.rules, by = "gini"), n=5))
inspectDT(head(sort(titanic.rules, by = "hyperLift"), n=5))
inspectDT(head(sort(titanic.rules, by = "hyperConfidence"), n=5))
quality(titanic.rules) <- cbind(
quality(titanic.rules),
interestMeasure(
titanic.rules,
c("gini", "hyperLift", "hyperConfidence"),
titanic.trans
)
)
inspectDT(head(sort(titanic.rules, by = "gini"), n=5))
inspectDT(head(sort(titanic.rules, by = "hyperLift"), n=5))
inspectDT(head(sort(titanic.rules, by = "hyperConfidence"), n=5))
inspect(head(sort(titanic.rules, by = "gini"), n=5))
inspect(head(sort(titanic.rules, by = "hyperLift"), n=5))
inspect(head(sort(titanic.rules, by = "hyperConfidence"), n=5))
titanic.rules.sub3 <- titanic.rules[is.maximal(titanic.rules)]
inspectDT(titanic.rules.sub3)
titanic.rules.sub4 <- titanic.rules[!is.redundant(titanic.rules)]
# Por pantalla
inspectDT(titanic.rules.sub4)
titanic.rules.sub5 <- titanic.rules[!is.redundant(titanic.rules) & is.maximal(titanic.rules)]
# Por pantalla
inspectDT(titanic.rules.sub5)
titanic.eclat.sub1 <- titanic.eclat[is.maximal(titanic.eclat)]
titanic.eclat.sub2 <- titanic.eclat[is.closed(titanic.eclat)]
titanic.eclat.sub2 <- titanic.eclat[is.closed(titanic.eclat)]
inspectDT(titanic.eclat.sub2)
