customer_df.sel <- customer_df[, c("MonthlyCharges", "Churn")]
customer_df.sel
sel.cols <- c(rfFuncs.rfe$optVariables,"Churn")
customer_df.sel <- customer_df[, sel.cols]
customer_df.sel <- customer_df[, c(rfFuncs.rfe$optVariables,"Churn")]
customer_df.sel <- customer_df[, c(rfFuncs.rfe$optVariables,"Churn")]
customer_df
rfFuncs.rfe$optVariables
sel.cols <- c(rfFuncs.rfe$optVariables,"Churn")
sel.cols <- str_replace(sel.cols, " ", "")
sel.cols <- str_replace(sel.cols, "optic", "")
sel.cols <- str_replace(sel.cols, "year", "")
sel.cols <- str_replace(sel.cols, "check", "")
sel.cols <- str_replace(sel.cols, "Yes", "")
sel.cols <- str_replace(sel.cols, "No", "")
sel.cols
customer_df.sel <- customer_df[, sel.cols]
sel.cols <- c(rfFuncs.rfe$optVariables,"Churn")
sel.cols <- str_replace(sel.cols, " ", "")
sel.cols <- str_replace(sel.cols, "Fiber", "")
sel.cols <- str_replace(sel.cols, "optic", "")
sel.cols <- str_replace(sel.cols, "year", "")
sel.cols <- str_replace(sel.cols, "check", "")
sel.cols <- str_replace(sel.cols, "Yes", "")
sel.cols <- str_replace(sel.cols, "No", "")
sel.cols
customer_df.sel <- customer_df[, sel.cols]
sel.cols <- c(rfFuncs.rfe$optVariables,"Churn")
sel.cols <- str_replace(sel.cols, " ", "")
sel.cols <- str_replace(sel.cols, "Fiber", "")
sel.cols <- str_replace(sel.cols, "optic", "")
sel.cols <- str_replace(sel.cols, "year", "")
sel.cols <- str_replace(sel.cols, "check", "")
sel.cols <- str_replace(sel.cols, "Yes", "")
sel.cols <- str_replace(sel.cols, "No", "")
sel.cols <- str_replace(sel.cols, "Two", "")
sel.cols
customer_df.sel <- customer_df[, sel.cols]
sel.cols <- c(rfFuncs.rfe$optVariables,"Churn")
sel.cols <- str_replace(sel.cols, " ", "")
sel.cols <- str_replace(sel.cols, "Fiber", "")
sel.cols <- str_replace(sel.cols, "optic", "")
sel.cols <- str_replace(sel.cols, "year", "")
sel.cols <- str_replace(sel.cols, "check", "")
sel.cols <- str_replace(sel.cols, "Yes", "")
sel.cols <- str_replace(sel.cols, "No", "")
sel.cols <- str_replace(sel.cols, "Two", "")
sel.cols <- str_replace(sel.cols, "Electronic", "")
sel.cols
customer_df.sel <- customer_df[, sel.cols]
sel.cols <- c(rfFuncs.rfe$optVariables,"Churn")
sel.cols <- str_replace(sel.cols, " ", "")
sel.cols <- str_replace(sel.cols, "Fiber", "")
sel.cols <- str_replace(sel.cols, "optic", "")
sel.cols <- str_replace(sel.cols, "year", "")
sel.cols <- str_replace(sel.cols, "check", "")
sel.cols <- str_replace(sel.cols, "Yes", "")
sel.cols <- str_replace(sel.cols, "No", "")
sel.cols <- str_replace(sel.cols, "Two", "")
sel.cols <- str_replace(sel.cols, "Electronic", "")
sel.cols <- str_replace(sel.cols, "One", "")
sel.cols
customer_df.sel <- customer_df[, sel.cols]
sel.cols <- c(rfFuncs.rfe$optVariables,"Churn")
sel.cols <- str_replace(sel.cols, " ", "")
sel.cols <- str_replace(sel.cols, "Fiber", "")
sel.cols <- str_replace(sel.cols, "optic", "")
sel.cols <- str_replace(sel.cols, "year", "")
sel.cols <- str_replace(sel.cols, "check", "")
sel.cols <- str_replace(sel.cols, "Yes", "")
sel.cols <- str_replace(sel.cols, "No", "")
sel.cols <- str_replace(sel.cols, "Two", "")
sel.cols <- str_replace(sel.cols, "Electronic", "")
sel.cols <- str_replace(sel.cols, "One", "")
customer_df.sel <- customer_df[, sel.cols]
# Para la reproducibilidad de los resultados
set.seed(123)
trainIndex <- createDataPartition(
customer_df.sel$Churn,
p = 0.66,
list = FALSE,
times = 1)
customer.sel.train <- customer.sel[trainIndex, ]
# Para la reproducibilidad de los resultados
set.seed(123)
trainIndex <- createDataPartition(
customer_df.sel$Churn,
p = 0.66,
list = FALSE,
times = 1)
customer.sel.train <- customer_df.sel[trainIndex, ]
customer.sel.test <- customer_df.sel[-trainIndex, ]
View(customer.sel.train)
View(customer.sel.train)
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- sample.int(1000, number + 1)
svmLinear.control <- trainControl(
method = "cv",
number = number,
seeds = seeds
returnResamp = "all",
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- sample.int(1000, number + 1)
svmLinear.control <- trainControl(
method = "cv",
number = number,
seeds = seeds,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE)
svmLinear <- train(
PRONOSTICO ~ .,
data = customer.sel.train,
method = "svmLinear",
tuneLength = 10,
trControl = svmLinear.control
)
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- sample.int(1000, number + 1)
svmLinear.control <- trainControl(
method = "cv",
number = number,
seeds = seeds,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE)
svmLinear <- train(
Churn ~ .,
data = customer.sel.train,
method = "svmLinear",
tuneLength = 10,
trControl = svmLinear.control
)
saveRDS(svmLinear, "./models/svmLinear")
svmLinear = readRDS("./models/svmLinear")
# Mostramos el resultado
svmLinear
modelLookup("svmLinear")
c(10^(-2:10))
c(10^(-2:5))
# Definimos el grid de búsqueda de los hiperparámetros
C <- c(10^(-2:5))
svmLinear.grid <- expand.grid(C=C)
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- vector(mode = "list", length = number + 1)
for(i in 1:number){
seeds[[i]] <- sample.int(1000, length(C))
}
seeds[[number + 1]] <- sample.int(1000, 1)
svmLinear.control <- trainControl(
method = "cv",
number = number,
seeds = seeds,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE)
svmLinear <- train(
Churn ~ .,
data = customer.sel.train,
method = "svmLinear",
tuneGrid = svmLinear.grid,
trControl = svmLinear.control
)
# Definimos el grid de búsqueda de los hiperparámetros
C <- c(10^(-2:5))
svmLinear.grid <- expand.grid(C=C)
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- vector(mode = "list", length = number + 1)
for(i in 1:number){
seeds[[i]] <- sample.int(1000, length(C))
}
seeds[[number + 1]] <- sample.int(1000, 1)
svmLinear.control <- trainControl(
method = "cv",
number = number,
seeds = seeds,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE)
svmLinear <- train(
Churn ~ .,
data = customer.sel.train,
method = "svmLinear",
tuneGrid = svmLinear.grid,
trControl = svmLinear.control
)
# Definimos el grid de búsqueda de los hiperparámetros
C <- c(10^(-2:5))
svmLinear.grid <- expand.grid(C=C)
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- vector(mode = "list", length = number + 1)
for(i in 1:number){
seeds[[i]] <- sample.int(1000, length(C))
}
seeds[[number + 1]] <- sample.int(1000, 1)
svmLinear.control <- trainControl(
method = "cv",
number = number,
seeds = seeds,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE)
svmLinear <- train(
Churn ~ .,
data = customer.sel.train,
method = "svmLinear",
tuneGrid = svmLinear.grid,
trControl = svmLinear.control
)
# Definimos el grid de búsqueda de los hiperparámetros
C <- c(10^(-2:2))
svmLinear.grid <- expand.grid(C=C)
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- vector(mode = "list", length = number + 1)
for(i in 1:number){
seeds[[i]] <- sample.int(1000, length(C))
}
seeds[[number + 1]] <- sample.int(1000, 1)
svmLinear.control <- trainControl(
method = "cv",
number = number,
seeds = seeds,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE)
svmLinear <- train(
Churn ~ .,
data = customer.sel.train,
method = "svmLinear",
tuneGrid = svmLinear.grid,
trControl = svmLinear.control
)
saveRDS(svmLinear, "./models/svmLinear.rds")
svmLinear = readRDS("./models/svmLinear.rds")
# Mostramos el resultado
svmLinear
# Definimos el grid de búsqueda de los hiperparámetros
C <- c(10^(-4:4))
svmLinear.grid <- expand.grid(C=C)
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- vector(mode = "list", length = number + 1)
for(i in 1:number){
seeds[[i]] <- sample.int(1000, length(C))
}
seeds[[number + 1]] <- sample.int(1000, 1)
svmLinear.control <- trainControl(
method = "cv",
number = number,
seeds = seeds,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE)
svmLinear <- train(
Churn ~ .,
data = customer.sel.train,
method = "svmLinear",
tuneGrid = svmLinear.grid,
trControl = svmLinear.control
)
saveRDS(svmLinear, "./models/svmLinear.rds")
svmLinear = readRDS("./models/svmLinear.rds")
# Mostramos el resultado
svmLinear
plot(svmLinear)
svmLinear$finalModel
plot(svmLinear$finalModel)
modelLookup("C5.0")
summary(svmLinear$finalModel)
summary(svmLinear$bestTune)
# Definimos los hiperparámetros a probar
trials <- c(1:20)
model <- c("tree", "rules")
winnow <- c(TRUE, FALSE)
# Definimos el grid de búsqueda de los hiperparámetros
c50.grid <- expand.grid(
trials = trials,
model = model,
winnow = winnow)
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- vector(mode = "list", length = number + 1)
for(i in 1:number){
seeds[[i]] <- sample.int(1000, length(trials)*length(model)*length(winnow))
}
seeds[[number + 1]] <- sample.int(1000, 1)
c50.control <- trainControl(
method = "cv",
number = number,
seeds = seeds,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE)
c50 <- train(
Churn ~ .,
data = customer.sel.train,
method = "C5.0",
tuneGrid = c50.grid,
trControl = c50.control
)
saveRDS(c50, "./models/c50.rds")
c50 = readRDS("./models/c50.rds")
# Mostramos el resultado por pantalla
c50
# Definimos los hiperparámetros a probar
trials <- c(1:20)
model <- c("tree", "rules")
winnow <- c(TRUE, FALSE)
# Definimos el grid de búsqueda de los hiperparámetros
c50.grid <- expand.grid(
trials = trials,
model = model,
winnow = winnow)
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- vector(mode = "list", length = number + 1)
for(i in 1:number){
seeds[[i]] <- sample.int(1000, length(trials)*length(model)*length(winnow))
}
seeds[[number + 1]] <- sample.int(1000, 1)
c50.control <- trainControl(
method = "cv",
number = number,
seeds = seeds,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE)
# c50 <- train(
#   Churn ~ .,
#   data = customer.sel.train,
#   method = "C5.0",
#   tuneGrid = c50.grid,
#   trControl = c50.control
# )
#
# saveRDS(c50, "./models/c50.rds")
c50 = readRDS("./models/c50.rds")
# Mostramos el resultado por pantalla
c50
plot(c50)
modelLookup("nnet")
# Definimos los hiperparámetros a probar
size <- c(5,10,15,20,25,30,35,40,45,50)
decay <- c(10**(-5:2))
# Definimos el grid de búsqueda de los hiperparámetros
nnet.grid <- expand.grid(
size = size,
decay = decay)
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- vector(mode = "list", length = number + 1)
for(i in 1:number){
seeds[[i]] <- sample.int(1000, length(size)*length(decay))
}
seeds[[number + 1]] <- sample.int(1000, 1)
nnet.control <- trainControl(
method = "cv",
number = number,
seeds = seeds,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE)
nnet <- train(
Churn ~ .,
data = customer.sel.train,
method = "nnet",
tuneGrid = nnet.grid,
trControl = nnet.control
)
saveRDS(nnet, "./models/nnet.rds")
nnet = readRDS("./models/nnet.rds")
# Mostramos el resultado por pantalla
nnet
plot(nnet)
c50$results
c50$finalModel
cols <- c("Accuracy", "Kappa", "AccuracySD", "KappaSD")
training.results <- rbind.data.frame(
svmLinear$results[rownames(svmLinear$bestTune), ][, cols],
c50$results[rownames(c50$bestTune), ][, cols],
nnet$results[rownames(nnet$bestTune), ][, cols]
)
rownames(training.results) <- c("svmLinear", "c50", "nnet")
training.results
models <- list(svmLinear=svmLinear, c50=C50, nnet = nnet)
models <- list(svmLinear=svmLinear, c50=c50, nnet = nnet)
customer.resample <- resamples(models)
summary(customer.resample)
models <- list(svmLinear=svmLinear, c50=c50, nnet = nnet)
customer.resample <- resamples(models)
summary(customer.resample)
models <- list(svmLinear=svmLinear, c50=c50, nnet = nnet)
customer.resample <- resamples(models)
summary(customer.resample)
models <- list(svmLinear=svmLinear, c50=c50, nnet = nnet)
customer.resample <- resamples(models)
summary(customer.resample)
models <- list(svmLinear=svmLinear, c50=c50, nnet = nnet)
customer.resample <- resamples(models)
summary(customer.resample)
bwplot(customer.resample)
bwplot(customer.resample)
densityplot(customer.resample)
xyplot(customer.resample)
difValues <- diff(customer.resample)
summary(difValues)
densityplot(difValues, metric = "Accuracy",auto.key =TRUE, pch = "|")
levelplot(difValues, what="diferences")
models <- list(svmLinear=svmLinear, c50=c50, nnet = nnet)
customer.resample <- resamples(models)
# Mostramos la información
customer.resample
models <- list(svmLinear=svmLinear, c50=c50, nnet = nnet)
customer.resample <- resamples(models)
# Mostramos la resumen de la información de cada modelo
customer.resample
# Mostramos la resumen de la información de cada modelo
summary(customer.resample)
difValues <- diff(customer.resample)
summary(difValues)
# Definimos los hiperparámetros a probar
size <- c(5,10,15,20,25,30,35,40,45,50)
decay <- c(10**(-5:2))
# Definimos el grid de búsqueda de los hiperparámetros
nnet.grid <- expand.grid(
size = size,
decay = decay)
# Para garantizar la reproducibilidad de los resultados
set.seed(123)
number <- 10
seeds <- vector(mode = "list", length = number + 1)
for(i in 1:number){
seeds[[i]] <- sample.int(1000, length(size)*length(decay))
}
seeds[[number + 1]] <- sample.int(1000, 1)
nnet.control <- trainControl(
method = "cv",
number = number,
seeds = seeds,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE)
# nnet <- train(
#   Churn ~ .,
#   data = customer.sel.train,
#   method = "nnet",
#   tuneGrid = nnet.grid,
#   trControl = nnet.control
# )
#
# saveRDS(nnet, "./models/nnet.rds")
nnet = readRDS("./models/nnet.rds")
# Mostramos el resultado por pantalla
nnet
customer.svmLinear.pred <- predict(
svmLinear,
newdata = customer.sel.test
)
customer.svmLinear.conf <- confusionMatrix(
customer.svmLinear.pred,
customer.sel.test[, ncol(customer.sel.test)],
positive = "Yes"
)
customer.svmLinear.conf
customer.c50.pred <- predict(
c50,
newdata = customer.sel.test
)
customer.c50.conf <- confusionMatrix(
customer.c50.pred,
customer.sel.test[, ncol(customer.sel.test)],
positive = "Yes"
)
customer.c50.conf
customer.nnet.pred <- predict(
nnet,
newdata = customer.sel.test
)
customer.nnet.conf <- confusionMatrix(
customer.nnet.pred,
customer.sel.test[, ncol(customer.sel.test)],
positive = "Yes"
)
customer.nnet.conf
customer.c50.conf.overall <- t(as.matrix(customer.c50.conf, what = "overall"))
customer.svmLinear.conf.overall <- t(as.matrix(customer.svmLinear.conf, what = "overall"))
customer.nnet.conf.overall <- t(as.matrix(customer.nnet.conf, what = "overall"))
customer.pred <- rbind.data.frame(
customer.c50.conf.overall,
customer.svmLinear.conf.overall,
customer.nnet.conf.overall)
rownames(customer.pred) = c("svmLinear","c50", "nnet")
# Mostramos por pantalla
customer.pred
