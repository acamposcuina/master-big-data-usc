#   data = hepatitisTrain.sel,
#   method = "svmLinear",
#   tuneLength = 10,
#   preProc = c("center", "scale"),
#   trControl = fitcontrol
# )
#
# saveRDS(svmFit_CyE, "./models/svmFit_CyE.rds")
svmFit_CyE = readRDS("./models/svmFit_CyE.rds")
# Mostramos el resultado
print(svmFit_CyE)
print(svmFit_CyE$results)
set.seed(123)
nnetGrid <- expand.grid(
size=c(10:20),
decay=c(0.5,0.1,0.001)
)
fitControl<- trainControl(
method = "cv",
number = 10,
returnResamp = "all",
verboseIter = FALSE,
allowParallel = TRUE
)
# nnet.cv.10 <- train(
#   PRONOSTICO~.,
#   data=hepatitisTrain.sel,
#   method="nnet",
#   tuneGrid=nnetGrid,
#   trControl=fitControl
#   )
#
# saveRDS(nnet.cv.10, "./models/nnet.cv.10.rds")
nnet.cv.10 = readRDS("./models/nnet.cv.10.rds")
plot(nnet.cv.10)
set.seed(123)
nnetGrid <- expand.grid(
size=c(10:20),
decay=c(0.5,0.1,0.001)
)
fitControl<- trainControl(
method = "cv",
number = 10,
returnResamp = "all",
verboseIter = FALSE,
allowParallel = TRUE
)
# nnet.cv.10_CyS <- train(
#   PRONOSTICO~.,
#   data=hepatitisTrain.sel,
#   method="nnet",
#   preProc= c("center","scale"),
#   tuneGrid=nnetGrid,
#   trControl=fitControl
#   )
#
# saveRDS(nnet.cv.10_CyS, "./models/nnet.cv.10_CyS.rds")
nnet.cv.10_CyS = readRDS("./models/nnet.cv.10_CyS.rds")
plot(nnet.cv.10_CyS)
set.seed(123)
fitControl<- trainControl(
method = "cv",
number = 10,
returnResamp = "all",
verboseIter = FALSE,
allowParallel = TRUE
)
# nnet.cv.10_nogrid <- train(
#   PRONOSTICO~.,
#   data=hepatitisTrain.sel,
#   method="nnet",
#   preProc= c("center","scale"),
#   tuneLength=10,
#   trControl=fitControl
#   )
#
# saveRDS(nnet.cv.10_nogrid, "./models/nnet.cv.10_nogrid.rds")
nnet.cv.10_nogrid = readRDS("./models/nnet.cv.10_nogrid.rds")
plot(nnet.cv.10_nogrid)
set.seed(123)
svmGrid <- expand.grid(C=c(0.25,0.5,1,2,4,8,16,32,64))
fitcontrol <- trainControl(
method = "cv",
number = 10,
returnResamp = "all",
verboseIter = TRUE,
allowParallel = TRUE
)
# svmFit_cv <- train(
#   PRONOSTICO ~ .,
#   data = hepatitisTrain.sel,
#   method = "svmLinear",
#   tuneGrid=svmGrid,
#   preProc = c("center", "scale"),
#   trControl = fitcontrol
# )
#
# saveRDS(svmFit_cv, "./models/svmFit_cv.rds")
svmFit_cv = readRDS("./models/svmFit_cv.rds")
# Mostramos el resultado
plot(svmFit_cv)
print(svmFit_cv$bestTune)
set.seed(123)
fitControl <- trainControl(
method = "cv",
number=10,
returnResamp = "final",
summaryFunction = twoClassSummary,
classProbs=TRUE,
verboseIter=TRUE
)
# svmFitROC <- train(
#   PRONOSTICO~.,
#   data=hepatitisTrain.sel,
#   method="svmLinear",
#   tuneLength=10,
#   trControl=fitControl,
#   metric = "ROC")
#
# saveRDS(svmFitROC, "./models/svmFitROC.rds")
svmFitROC = readRDS("./models/svmFitROC.rds")
svmProb <- predict(
svmFitROC,
newdata = hepatitisTest.sel,
type = "prob"
)
head(svmProb)
svmROC <- roc(
hepatitisTest$PRONOSTICO,
svmProb$VIVE,
dataGrid = TRUE,
gridLength = 100)
plot(svmROC)
set.seed(123)
fitControl <- trainControl(
method = "cv",
number=10,
returnResamp = "final",
summaryFunction = twoClassSummary,
classProbs=TRUE,
verboseIter=TRUE
)
# nnetFitROC <- train(
#   PRONOSTICO~.,
#   data=hepatitisTrain.sel,
#   method="nnet",
#   tuneLength=10,
#   trControl=fitControl,
#   metric = "ROC")
#
# saveRDS(nnetFitROC, "./models/nnetFitROC.rds")
nnetFitROC=readRDS("./models/nnetFitROC.rds")
nnetProb <- predict(
nnetFitROC,
newdata = hepatitisTest.sel,
type = "prob"
)
head(nnetProb)
nnetROC <- roc(
hepatitisTest$PRONOSTICO,
nnetProb$VIVE,
dataGrid = TRUE,
gridLength = 100
)
plot(nnetROC)
hepatitis.pred.nnet <- predict(
nnet.cv.10,
hepatitisTest.sel
)
hepatitis.conf.nnet <- confusionMatrix(
hepatitis.pred.nnet,
hepatitisTest.sel[, ncol(hepatitisTest.sel)],
positive = "VIVE"
)
hepatitis.conf.nnet
hepatitis.pred.nnet1 <- predict(
nnet.cv.10,
hepatitisTest.sel
)
hepatitis.conf.nnet1 <- confusionMatrix(
hepatitis.pred.nnet1,
hepatitisTest.sel[, ncol(hepatitisTest.sel)],
positive = "VIVE"
)
hepatitis.conf.nnet1
hepatitis.pred.nnet2 <- predict(
nnet.cv.10_CyS,
hepatitisTest.sel
)
hepatitis.conf.nnet2 <- confusionMatrix(
hepatitis.pred.nnet2,
hepatitisTest.sel[, ncol(hepatitisTest.sel)],
positive = "VIVE"
)
hepatitis.conf.nnet2
hepatitis.pred.svm <- predict(
svmFit_CyE,
hepatitisTest.sel
)
hepatitis.conf.svm <- confusionMatrix(
hepatitis.pred.svm,
hepatitisTest.sel[, ncol(hepatitisTest.sel)],
positive = "VIVE"
)
hepatitis.conf.svm
names(hepatitis.conf.svm)
hepatitis.conf.nnet.overall = t(as.matrix(hepatitis.conf.nnet, what = "overall"))
hepatitis.conf.svm.overall = t(as.matrix(hepatitis.conf.svm, what = "overall"))
tabla_ej11 = rbind.data.frame(
hepatitis.conf.nnet.overall,
hepatitis.conf.svm.overall)
rownames(tabla_ej11) = c("NNET","SVM")
tabla_ej11
as.matrix(hepatitis.conf.nnet, what = "overall")
as.matrix(hepatitis.conf.nnet, what = "positive")
as.matrix(hepatitis.conf.nnet, what = "xtabs")
as.matrix(hepatitis.conf.nnet, what = "classes")
as.matrix(hepatitis.conf.nnet, what = "overall")
hepatitis.conf.nnet.overall = t(as.matrix(hepatitis.conf.nnet, what = "overall"))
hepatitis.conf.svm.overall = t(as.matrix(hepatitis.conf.svm, what = "overall"))
tabla_ej11 = rbind.data.frame(
hepatitis.conf.nnet.overall,
hepatitis.conf.svm.overall)
rownames(tabla_ej11) = c("nnet.cv.10","svmFit_CyE")
tabla_ej11
models <- list(C50=C50.cv.10.range,Rpart=rpart.cv.10,Nnet = nnet.cv.10)
models <- list(C50=C50.cv.10,Rpart=rpart.cv.10,Nnet = nnet.cv.10)
models <- list(C50=C50Fit_Range10,Rpart=rpart.cv.10,Nnet = nnet.cv.10)
models <- list(
C50=C50Fit_Range,
Rpart=rpart.cv.10,
Nnet = nnet.cv.10)
models <- list(
C50 = C50Fit_Range,
SVM = svmFit_CyE,
Nnet = nnet.cv.10)
models <- list(
SVM = svmFit_CyE,
Nnet = nnet.cv.10)
hepatitis.resample <- resamples(models)
summary(hepatitis.resample)
bwplot(hepatitis.resample)
densityplot(hepatitis.resample)
xyplot(hepatitis.resample)
difValues <- diff(hepatitis.resample)
summary(difValues)
difValues <- diff(hepatitis.resample, adjustment = "none")
summary(difValues)
compare_models(a = nnet.cv.10, b = svmFit_CyE)
rm(list = ls())
knitr::opts_chunk$set(echo=TRUE)
knitr::opts_chunk$set(echo=TRUE)
setwd("c:/Users/Andres/Google Drive/USC/MaBD/Mineria de Datos/Practicas/Practica2/")
library(pROC)
library(partykit)
library(caret)
library(stringr)
hepatitis.KnnImp <- read.csv(
"./data/hepatitisKnnImp.csv",
header = TRUE,
stringsAsFactors = TRUE)
cols_to_plot = c("BILIRRUBINA", "FOSFATOalc", "SGOT", "ALBUMINA")
featurePlot(
x = hepatitis.KnnImp[, (names(hepatitis.KnnImp) %in% cols_to_plot)],
y = hepatitis.KnnImp$PRONOSTICO,
plot = "pairs",
auto.key = list(columns = 2)
)
par(mfrow = c(2, 2))
# Gr치fica de la esquina superior izquierda
featurePlot(
x = hepatitis.KnnImp[, (names(hepatitis.KnnImp) %in% cols_to_plot)],
y = hepatitis.KnnImp$PRONOSTICO,
plot = "box",
auto.key = list(columns = 2)
)
# Gr치fica de la esquina superior derecha
featurePlot(
x = hepatitis.KnnImp[, (names(hepatitis.KnnImp) %in% cols_to_plot)],
y = hepatitis.KnnImp$PRONOSTICO,
plot = "strip",
auto.key = list(columns = 2)
)
# Gr치fica de la esquina inferior izquierda
featurePlot(
x = hepatitis.KnnImp[, (names(hepatitis.KnnImp) %in% cols_to_plot)],
y = hepatitis.KnnImp$PRONOSTICO,
plot = "density",
auto.key = list(columns = 2)
)
# Gr치fica de la esquina inferior derecha
featurePlot(
x = hepatitis.KnnImp[, (names(hepatitis.KnnImp) %in% cols_to_plot)],
y = hepatitis.KnnImp$PRONOSTICO,
plot = "ellipse",
auto.key = list(columns = 2)
)
par(mfrow = c(1, 1))
set.seed(342)
trainIndex <- createDataPartition(
hepatitis.KnnImp$PRONOSTICO,
p = 0.66,
list = FALSE,
times = 1
)
hepatitisTrain <- hepatitis.KnnImp[trainIndex, ]
hepatitisTest <- hepatitis.KnnImp[-trainIndex, ]
hepatitisPCA <-
preProcess(hepatitis.KnnImp[1:ncol(hepatitis.KnnImp) - 1],
method = "pca", thresh = 0.95)
print(hepatitisPCA)
hepatitisPCA <- preProcess(
hepatitis.KnnImp[1:ncol(hepatitis.KnnImp) - 1],
method = "pca", thresh = 0.95)
print(hepatitisPCA)
PCATrain <- predict(
hepatitisPCA,
hepatitisTrain[, 1:ncol(hepatitisTrain) - 1])
PCATest <- predict(
hepatitisPCA,
hepatitisTest[, 1:ncol(hepatitisTest) - 1])
PCATrain <- data.frame(PCATrain, hepatitisTrain$PRONOSTICO)
PCATest <- data.frame(PCATest, hepatitisTest$PRONOSTICO)
PCATrain <- PCATrain[, (ncol(PCATrain)-6):ncol(PCATrain)]
PCATest <- PCATest[, (ncol(PCATest)-6):ncol(PCATest)]
cols_to_plot = c("PC1", "PC2", "PC3", "PC4")
featurePlot(
x = PCATrain[, (names(PCATrain) %in% cols_to_plot)],
y = PCATrain$hepatitisTrain.PRONOSTICO,
plot = "pairs",
auto.key = list(columns = 2)
)
hepatitisICA <- preProcess(
hepatitis.KnnImp[1:ncol(hepatitis.KnnImp) - 1],
method = "ica",
n.comp = 6)
print(hepatitisICA)
ICATrain <- predict(
hepatitisICA,
hepatitisTrain[, 1:ncol(hepatitisTrain) - 1])
ICATest <- predict(
hepatitisICA,
hepatitisTest[, 1:ncol(hepatitisTest) - 1])
ICATrain <- data.frame(ICATrain, hepatitisTrain$PRONOSTICO)
ICATest <- data.frame(ICATest, hepatitisTest$PRONOSTICO)
ICATrain <- ICATrain[, (ncol(ICATrain)-6):ncol(ICATrain)]
ICATest <- ICATest[, (ncol(ICATest)-6):ncol(ICATest)]
cols_to_plot = c("ICA1", "ICA2", "ICA3", "ICA4")
featurePlot(
x = ICATrain[, (names(ICATrain) %in% cols_to_plot)],
y = ICATrain$hepatitisTrain.PRONOSTICO,
plot = "pairs",
auto.key = list(columns = 2))
nearZeroVar(hepatitis.KnnImp[1:ncol(hepatitis.KnnImp) - 1], saveMetrics = TRUE)
subsets <- c(3:19)
set.seed(123)
seeds <- vector(mode = "list", length = 6)
for (i in 1:5)
seeds[[i]] <- sample.int(1000, length(subsets) + 1)
seeds[[6]] <- sample.int(1000, 1)
ctrl.rfe <- rfeControl(
functions = rfFuncs,
method = "cv",
number = 5,
seeds = seeds,
returnResamp = "final",
verbose = TRUE,
allowParallel = TRUE
)
set.seed(123)
subsets <- c(3:19)
seeds <- vector(mode = "list", length = 6)
for (i in 1:5)
seeds[[i]] <- sample.int(1000, length(subsets) + 1)
seeds[[6]] <- sample.int(1000, 1)
ctrl.rfe <- rfeControl(
functions = rfFuncs,
method = "cv",
number = 5,
seeds = seeds,
returnResamp = "final",
verbose = TRUE,
allowParallel = TRUE
)
set.seed(342)
rf.rfe <- rfe(
PRONOSTICO ~ .,
data = hepatitis.KnnImp,
sizes = subsets,
rfeControl = ctrl.rfe)
saveRDS(rf.rfe, "./models/rf.rfe1.rds")
rf.rfe = readRDS("./models/rf.rfe1.rds")
set.seed(342)
# rf.rfe <- rfe(
#   PRONOSTICO ~ .,
#   data = hepatitis.KnnImp,
#   sizes = subsets,
#   rfeControl = ctrl.rfe)
#
# saveRDS(rf.rfe, "./models/rf.rfe1.rds")
rf.rfe = readRDS("./models/rf.rfe1.rds")
rf.rfe
rf.rfe$optVariables
sel.cols <- c(rf.rfe$optVariables,"PRONOSTICO")
## Este bloque se comenta para que no provoque errores al
## generar el fichero HTML
#
# hepatitisTrain.sel <- hepatitisTrain[, sel.cols]
# hepatitisTest.sel <- hepatitisTest[, sel.cols]
print(sel.cols)
sel.cols <- str_replace(sel.cols, "TRUE", "")
sel.cols <- str_replace(sel.cols, "MASCULINO", "")
print(sel.cols)
hepatitisTrain.sel <- hepatitisTrain[, sel.cols]
hepatitisTest.sel <- hepatitisTest[, sel.cols]
set.seed(342)
ctrl.rfe <- rfeControl(
functions = treebagFuncs,
method = "cv",
number = 5,
seeds = seeds,
returnResamp = "final",
verbose = TRUE,
allowParallel = TRUE
)
rf.rfe <- rfe(
PRONOSTICO ~ .,
data = hepatitis.KnnImp,
sizes = subsets,
rfeControl = ctrl.rfe
)
saveRDS(rf.rfe, "./models/rf.rfe2.rds")
rf.rfe = readRDS("./models/rf.rfe2.rds")
set.seed(342)
ctrl.rfe <- rfeControl(
functions = treebagFuncs,
method = "cv",
number = 5,
seeds = seeds,
returnResamp = "final",
verbose = TRUE,
allowParallel = TRUE
)
# rf.rfe <- rfe(
#   PRONOSTICO ~ .,
#   data = hepatitis.KnnImp,
#   sizes = subsets,
#   rfeControl = ctrl.rfe
#   )
#
# saveRDS(rf.rfe, "./models/rf.rfe2.rds")
rf.rfe = readRDS("./models/rf.rfe2.rds")
rf.rfe
set.seed(342)
ctrl.rfe <- rfeControl(
functions = nbFuncs,
method = "cv",
number = 5,
seeds = seeds,
returnResamp = "final",
verbose = TRUE,
allowParallel = TRUE
)
rf.rfe <- rfe(
PRONOSTICO ~ .,
data = hepatitis.KnnImp,
sizes = subsets,
rfeControl = ctrl.rfe
)
saveRDS(rf.rfe, "./models/rf.rfe3.rds")
rf.rfe = readRDS("./models/rf.rfe3.rds")
rf.rfe
set.seed(342)
ctrl.rfe <- rfeControl(
functions = nbFuncs,
method = "cv",
number = 5,
seeds = seeds,
returnResamp = "final",
verbose = TRUE,
allowParallel = TRUE
)
# rf.rfe <- rfe(
#   PRONOSTICO ~ .,
#   data = hepatitis.KnnImp,
#   sizes = subsets,
#   rfeControl = ctrl.rfe
#   )
#
# saveRDS(rf.rfe, "./models/rf.rfe3.rds")
rf.rfe = readRDS("./models/rf.rfe3.rds")
rf.rfe
set.seed(342)
ctrl.rfe <- rfeControl(
functions = caretFuncs,
method = "cv",
number = 5,
seeds = seeds,
returnResamp = "final",
verbose = TRUE,
allowParallel = TRUE
)
rf.rfe <- rfe(
PRONOSTICO ~ .,
method = "svmLinear",
data = hepatitis.KnnImp,
sizes = subsets,
rfeControl = ctrl.rfe
)
saveRDS(rf.rfe, "./models/rf.rfe4.rds")
rf.rfe = readRDS("./models/rf.rfe4.rds")
rf.rfe
